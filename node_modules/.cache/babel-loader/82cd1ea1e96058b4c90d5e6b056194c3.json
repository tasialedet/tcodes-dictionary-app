{"ast":null,"code":"var _jsxFileName = \"/Users/tasialedet/Documents/GitHub/tcodes-dictionary-app/src/Results.js\";\nimport React from \"react\";\nimport Meaning from \"./Meaning\";\nimport Phonetic from \"./Phonetic\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function Results(props) {\n  console.log(props.results);\n\n  if (props.results) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"Results\",\n      children: [/*#__PURE__*/_jsxDEV(\"hr\", {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 10,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"section\", {\n        children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n          className: \"SearchedWord\",\n          children: props.results.word\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 12,\n          columnNumber: 11\n        }, this), props.results.phonetics.map(function (phonetic, index) {\n          return /*#__PURE__*/_jsxDEV(\"section\", {\n            children: /*#__PURE__*/_jsxDEV(Phonetic, {\n              phonetic: phonetic\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 17,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 16,\n            columnNumber: 15\n          }, this);\n        }), props.results.meanings.map(function (meaning, index) {\n          return /*#__PURE__*/_jsxDEV(\"div\", {\n            children: /*#__PURE__*/_jsxDEV(Meaning, {\n              meaning: meaning\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 24,\n              columnNumber: 17\n            }, this)\n          }, index, false, {\n            fileName: _jsxFileName,\n            lineNumber: 23,\n            columnNumber: 15\n          }, this);\n        }), props.results.meanings]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 11,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 9,\n      columnNumber: 7\n    }, this);\n  } else {\n    return null;\n  }\n}\n_c = Results;\n\nvar _c;\n\n$RefreshReg$(_c, \"Results\");","map":{"version":3,"sources":["/Users/tasialedet/Documents/GitHub/tcodes-dictionary-app/src/Results.js"],"names":["React","Meaning","Phonetic","Results","props","console","log","results","word","phonetics","map","phonetic","index","meanings","meaning"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,WAApB;AACA,OAAOC,QAAP,MAAqB,YAArB;;AAEA,eAAe,SAASC,OAAT,CAAiBC,KAAjB,EAAwB;AACrCC,EAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAACG,OAAlB;;AACA,MAAIH,KAAK,CAACG,OAAV,EAAmB;AACjB,wBACE;AAAK,MAAA,SAAS,EAAC,SAAf;AAAA,8BACE;AAAA;AAAA;AAAA;AAAA,cADF,eAEE;AAAA,gCACE;AAAI,UAAA,SAAS,EAAC,cAAd;AAAA,oBAA8BH,KAAK,CAACG,OAAN,CAAcC;AAA5C;AAAA;AAAA;AAAA;AAAA,gBADF,EAGGJ,KAAK,CAACG,OAAN,CAAcE,SAAd,CAAwBC,GAAxB,CAA4B,UAAUC,QAAV,EAAoBC,KAApB,EAA2B;AACtD,8BACE;AAAA,mCACE,QAAC,QAAD;AAAU,cAAA,QAAQ,EAAED;AAApB;AAAA;AAAA;AAAA;AAAA;AADF,aAAcC,KAAd;AAAA;AAAA;AAAA;AAAA,kBADF;AAKD,SANA,CAHH,EAUGR,KAAK,CAACG,OAAN,CAAcM,QAAd,CAAuBH,GAAvB,CAA2B,UAAUI,OAAV,EAAmBF,KAAnB,EAA0B;AACpD,8BACE;AAAA,mCACE,QAAC,OAAD;AAAS,cAAA,OAAO,EAAEE;AAAlB;AAAA;AAAA;AAAA;AAAA;AADF,aAAUF,KAAV;AAAA;AAAA;AAAA;AAAA,kBADF;AAKD,SANA,CAVH,EAiBGR,KAAK,CAACG,OAAN,CAAcM,QAjBjB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFF;AAAA;AAAA;AAAA;AAAA;AAAA,YADF;AAwBD,GAzBD,MAyBO;AACL,WAAO,IAAP;AACD;AACF;KA9BuBV,O","sourcesContent":["import React from \"react\";\nimport Meaning from \"./Meaning\";\nimport Phonetic from \"./Phonetic\";\n\nexport default function Results(props) {\n  console.log(props.results);\n  if (props.results) {\n    return (\n      <div className=\"Results\">\n        <hr />\n        <section>\n          <h2 className=\"SearchedWord\">{props.results.word}</h2>\n\n          {props.results.phonetics.map(function (phonetic, index) {\n            return (\n              <section key={index}>\n                <Phonetic phonetic={phonetic} />\n              </section>\n            );\n          })}\n          {props.results.meanings.map(function (meaning, index) {\n            return (\n              <div key={index}>\n                <Meaning meaning={meaning} />\n              </div>\n            );\n          })}\n          {props.results.meanings}\n        </section>\n      </div>\n    );\n  } else {\n    return null;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}